from typing import List

from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4

def prepare_table(df):
    data = [df.columns.tolist()] + df.values.tolist()
    table = Table(data)
    table.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.grey),
        ("TEXTCOLOR", (0, 0), (-1, 0), colors.whitesmoke),
        ("ALIGN", (0, 0), (-1, -1), "CENTER"),
        ("GRID", (0, 0), (-1, -1), 0.5, colors.black),
        ("FONTSIZE", (0, 0), (-1, -1), 10),
    ]))
    return table

def split_df(df):
    dfs = {}

    # Iterate over all columns except the first one
    for col in df.columns[1:-1]:
        dfs[col] = df[[df.columns[0], col]]
    return dfs
#
# def add_top_suppliers(elements: List, df_split: dict, styles: dict):
#     """Append top 10 suppliers per category to the PDF elements list."""
#     for col in df_split.keys():
#         elements.append(Paragraph(f"Ranking by {col}", styles["Heading3"]))
#
#         # Sort by rank (ascending) and get top 10
#         top10 = df_split[col].sort_values(by=df_split[col].columns[1], ascending=True).head(10)
#
#         for idx, row in top10.iterrows():
#             line = f"Rank: {row[1]} â†’ Supplier: {row[0]}"
#             elements.append(Paragraph(line, styles["Normal"]))
#             elements.append(Spacer(1, 6))

def add_top_suppliers(elements, df_split, custom_heading3):
    for col in df_split.keys():
        elements.append(Paragraph(f"Ranking by {col}", custom_heading3))
        elements.append(Spacer(1, 12))

        # Top 10 based on the second column
        top10 = df_split[col].sort_values(by=df_split[col].columns[1], ascending=True).head(10)
        top_supplier = top10.iloc[0]
        summary_text = f"Top supplier by {col} is {top_supplier.iloc[0]}."
        elements.append(Paragraph(summary_text))
        elements.append(Spacer(1, 18))
        # Table
        table_data = [["Rank", "Supplier"]]
        for idx, row in top10.iterrows():
            table_data.append([row.iloc[1], row.iloc[0]])

        table = Table(table_data, hAlign='LEFT')
        table.setStyle(TableStyle([
            ("BACKGROUND", (0,0), (-1,0), colors.azure),
            ("GRID", (0,0), (-1,-1), 1, colors.black),
            ("ALIGN", (0,0), (-1,-1), "CENTER"),
            ("FONTNAME", (0,0), (-1,0), "Helvetica-Bold")
        ]))
        elements.append(table)
        elements.append(Spacer(1, 12))

def  generate_report(initial_df, perturbation, perturbated_df, report_file):
    doc = SimpleDocTemplate(report_file, pagesize=A4)
    styles = getSampleStyleSheet()
    elements = []
    custom_heading2 = ParagraphStyle(
        name="CustomHeading",
        parent=styles["Heading2"],
        textColor=colors.darkgreen  # Change to any color you like
    )
    custom_heading3 = ParagraphStyle(
        name="CustomHeading",
        parent=styles["Heading4"],
        textColor=colors.darkblue  # Change to any color you like
    )
    # Title
    elements.append(Paragraph("Supplier Selection Analysis Report", styles["Title"]))
    elements.append(Spacer(1, 12))

    elements.append(Paragraph(
        "This report provides an overview of the top-ranking suppliers based on recent performance metrics and their resilience.",
        styles["Normal"]))
    elements.append(Spacer(1, 24))


    elements.append(Paragraph("Overall Ranking Overview", custom_heading2))
    elements.append(Spacer(1, 12))
    initial_ranking = initial_df[[initial_df.columns[0], initial_df.columns[-1]]].head(10)
    initial_ranking.insert(0, "Rank", range(1, len(initial_ranking) + 1))
    table = prepare_table(initial_ranking)
    elements.append(table)
    elements.append(Spacer(1, 12))


    elements.append(Paragraph("Ranking Overview", custom_heading2))
    elements.append(Spacer(1, 12))

    initial_dfs = split_df(initial_df)
    add_top_suppliers(elements, initial_dfs, custom_heading3)

    elements.append(Paragraph("Perturbation Scenario generated by genAI", custom_heading2))
    elements.append(Spacer(1, 12))
    elements.append(Paragraph(str(perturbation), styles["Normal"]))

    elements.append(Paragraph("Ranking After Perturbation", custom_heading2))
    elements.append(Spacer(1, 12))

    final_ranking = perturbated_df[[perturbated_df.columns[0], perturbated_df.columns[-1]]].head(10)
    final_ranking.insert(0, "Rank", range(1, len(final_ranking) + 1))
    table = prepare_table(final_ranking)
    elements.append(table)
    elements.append(Spacer(1, 12))


    doc.build(elements)